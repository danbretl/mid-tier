from django.core.management.base import BaseCommand
from importer.api.eventful.paginator import EventfulPaginator
from optparse import make_option
from events.models import Event

class Command(BaseCommand):
    option_list = BaseCommand.option_list + (
        make_option('--page-size',
                    action='store',
                    dest='page_size',
                    type='int',
                    help='Amount of events per page to fetch'),
        make_option('--total-pages',
                    action='store',
                    dest='total_pages',
                    type='int',
                    help='Total pages of events to fetch'),
        make_option('--current-page',
                    action='store',
                    dest='current_page',
                    type='int',
                    help='Page to start on'),
        make_option('--dry-run',
                    action='store_true',
                    dest='dry_run',
                    default=True,
                    help='Save to db or not'),
        make_option('--mock-api',
                    action='store_true',
                    dest='mock_api',
                    default=False,
                    help='Use mock API class'),
        make_option('--make-dumps',
                    action='store_true',
                    dest='make_dumps',
                    default=False,
                    help='Use mock API class'),
        make_option('--interactive',
                    action='store_true',
                    dest='interactive',
                    default=False,
                    help='Import events in interactive mode')
        )
    help = 'Loads scraped object generated by eventful'

    def handle(self, **options):
        #        try:
        importer = EventfulPaginator(**options)
        results = importer.import_events()

        # FIXME should prolly happen automagically elsewhere
        for e in Event.objects.filter(id__in=[event_id for created, event_id in results]):
            e.save()

        #        except Exception, e:
        #            raise CommandError(e)
        #        else:
        created_events_count = reduce(lambda count, result: count + int(result[0]), results, 0)
        self.stdout.write('Successfully imported eventful API results: %i total | %i created.\n' % (
            len(results), created_events_count)
        )
